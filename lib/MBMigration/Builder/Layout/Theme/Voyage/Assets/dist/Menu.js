"use strict";
(() => {
  // ../../../../../../../packages/utils/src/color/rgbaToHex.ts
  function _rgbToHex(r, g, b) {
    r = Math.min(255, Math.max(0, Math.round(r)));
    g = Math.min(255, Math.max(0, Math.round(g)));
    b = Math.min(255, Math.max(0, Math.round(b)));
    const hexR = r.toString(16).padStart(2, "0");
    const hexG = g.toString(16).padStart(2, "0");
    const hexB = b.toString(16).padStart(2, "0");
    return `#${hexR}${hexG}${hexB}`.toUpperCase();
  }
  var rgbToHex = (rgba) => {
    const rgbValues = rgba.slice(4, -1).split(",").map((value) => parseInt(value.trim()));
    if (rgbValues.length !== 3) {
      return void 0;
    }
    return _rgbToHex(rgbValues[0], rgbValues[1], rgbValues[2]);
  };

  // ../../../../../../../packages/utils/src/dom/getNodeStyle.ts
  var getNodeStyle = (node) => {
    const computedStyles = window.getComputedStyle(node);
    const styles = {};
    Object.values(computedStyles).forEach((key) => {
      styles[key] = computedStyles.getPropertyValue(key);
    });
    return styles;
  };

  // ../../../../../../../packages/utils/src/text/capitalize.ts
  var capitalize = (str) => {
    return str.charAt(0).toUpperCase() + str.slice(1);
  };

  // ../../../../../../../packages/utils/src/text/toCamelCase.ts
  var toCamelCase = (key) => {
    const parts = key.split("-");
    for (let i = 1; i < parts.length; i++) {
      parts[i] = capitalize(parts[i]);
    }
    return parts.join("");
  };

  // src/Menu/model/getModel.ts
  var v = {
    "font-family": void 0,
    "font-family-type": "uploaded",
    "font-weight": void 0,
    "font-size": void 0,
    "line-height": void 0,
    "letter-spacing": void 0,
    colorHex: void 0,
    colorOpacity: 1,
    activeColorHex: void 0,
    activeColorOpacity: void 0
  };
  var getModel = (data2) => {
    const { node, families, defaultFamily } = data2;
    const styles = getNodeStyle(node);
    const dic = {};
    Object.keys(v).forEach((key) => {
      switch (key) {
        case "font-family": {
          const value = styles[key];
          const fontFamily = value.replace(/['"\,]/g, "").replace(/\s/g, "_").toLocaleLowerCase();
          if (!families[fontFamily]) {
            dic[toCamelCase(key)] = defaultFamily;
          } else {
            dic[toCamelCase(key)] = families[fontFamily];
          }
          break;
        }
        case "font-family-type": {
          dic[toCamelCase(key)] = "upload";
          break;
        }
        case "line-height": {
          dic[toCamelCase(key)] = 1;
          break;
        }
        case "font-size": {
          dic[toCamelCase(key)] = parseInt(styles[key]);
          break;
        }
        case "letter-spacing": {
          const value = styles[key];
          if (value === "normal") {
            dic[toCamelCase(key)] = 0;
          } else {
            const letterSpacingValue = value.replace(/px/g, "").trim();
            dic[toCamelCase(key)] = +letterSpacingValue;
          }
          break;
        }
        case "colorHex": {
          const toHex = rgbToHex(styles["color"]);
          dic[toCamelCase(key)] = toHex ?? "#000000";
          break;
        }
        case "colorOpacity": {
          break;
        }
        default: {
          dic[toCamelCase(key)] = styles[key];
        }
      }
    });
    return dic;
  };

  // ../../../../../../../packages/elements/src/utils/getData.ts
  var getData = () => {
    try {
      return {
        selector: "{{selector}}",
        families: JSON.parse("{{families}}"),
        defaultFamily: "{{defaultFamily}}"
      };
    } catch (e) {
      const familyMock = {
        lato: "uid_for_lato",
        roboto: "uid_for_roboto"
      };
      const mock = {
        selector: ".my-div",
        families: familyMock,
        defaultFamily: "lato"
      };
      throw new Error(
        JSON.stringify({
          error: `Invalid JSON ${e}`,
          details: `Must be: ${JSON.stringify(mock)}`
        })
      );
    }
  };
  var createData = (output) => {
    return JSON.stringify(output);
  };

  // ../../../../../../../packages/utils/src/models/prefixed.ts
  var prefixed = (v2, prefix) => {
    return Object.entries(v2).reduce((acc, [key, value]) => {
      let _key = prefix + capitalize(key);
      if (key.startsWith("active")) {
        _key = `active${capitalize(prefix)}${key.replace("active", "")}`;
      }
      return { ...acc, [_key]: value };
    }, {});
  };

  // src/Menu/index.ts
  var warns = {};
  var getMenuV = (data2) => {
    const { nav, selector } = data2;
    const ul = nav.children[0];
    let v2 = {};
    if (!ul) {
      warns["menu"] = {
        message: `Navigation don't have ul in ${selector}`
      };
      return v2;
    }
    const li = ul.querySelector("li");
    if (!li) {
      warns["menu li"] = {
        message: `Navigation don't have ul > li in ${selector}`
      };
      return v2;
    }
    const link = ul.querySelector("li > a");
    if (!link) {
      warns["menu li a"] = {
        message: `Navigation don't have ul > li > a in ${selector}`
      };
      return v2;
    }
    v2 = getModel({
      node: link,
      families: data2.families,
      defaultFamily: data2.defaultFamily
    });
    return { ...v2, itemPadding: 20 };
  };
  var getSubMenuV = (data2) => {
    const { subNav: ul, selector } = data2;
    let v2 = {};
    const li = ul.querySelector("li");
    if (!li) {
      warns["submenu li"] = {
        message: `Navigation don't have ul > li in ${selector}`
      };
      return v2;
    }
    const link = ul.querySelector("li > a");
    if (!link) {
      warns["submenu li a"] = {
        message: `Navigation don't have ul > li > a in ${selector}`
      };
      return v2;
    }
    const typography = getModel({
      node: link,
      families: data2.families,
      defaultFamily: data2.defaultFamily
    });
    const submenuTypography = prefixed(typography, "subMenu");
    const baseStyle = window.getComputedStyle(ul);
    const bgColor = rgbToHex(baseStyle.backgroundColor) ?? "#ffffff";
    return {
      ...submenuTypography,
      subMenuBgColorOpacity: 1,
      subMenuBgColorHex: bgColor
    };
  };
  var getNavStyles = (data2) => {
    const { subNav } = data2;
    let menuV = getMenuV(data2);
    if (subNav) {
      const _v = getSubMenuV({ ...data2, subNav });
      menuV = { ...menuV, ..._v };
    }
    return menuV;
  };
  var run = (data2) => {
    const node = document.querySelector(data2.selector);
    if (!node) {
      return JSON.stringify({
        error: `Element with selector ${data2.selector} not found`,
        warns
      });
    }
    const header = node;
    if (!header) {
      return JSON.stringify({
        error: `Element with selector ${data2.selector} has no header`,
        warns
      });
    }
    const nav = header.querySelector("#main-navigation");
    if (!nav) {
      return JSON.stringify({
        error: `Element with selector ${data2.selector} has no nav`,
        warns
      });
    }
    const subNav = header.querySelector(".sub-navigation") ?? void 0;
    const navData = {
      nav,
      subNav,
      selector: data2.selector,
      families: data2.families,
      defaultFamily: data2.defaultFamily
    };
    return createData({ data: getNavStyles(navData), warns });
  };
  var data = getData();
  run(data);
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvdXRpbHMvc3JjL2NvbG9yL3JnYmFUb0hleC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy91dGlscy9zcmMvZG9tL2dldE5vZGVTdHlsZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy91dGlscy9zcmMvdGV4dC9jYXBpdGFsaXplLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3V0aWxzL3NyYy90ZXh0L3RvQ2FtZWxDYXNlLnRzIiwgIi4uL3NyYy9NZW51L21vZGVsL2dldE1vZGVsLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2VsZW1lbnRzL3NyYy91dGlscy9nZXREYXRhLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3V0aWxzL3NyYy9tb2RlbHMvcHJlZml4ZWQudHMiLCAiLi4vc3JjL01lbnUvaW5kZXgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IE1WYWx1ZSB9IGZyb20gXCJAL3R5cGVzXCI7XG5cbmZ1bmN0aW9uIF9yZ2JUb0hleChyOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyKTogc3RyaW5nIHtcbiAgciA9IE1hdGgubWluKDI1NSwgTWF0aC5tYXgoMCwgTWF0aC5yb3VuZChyKSkpO1xuICBnID0gTWF0aC5taW4oMjU1LCBNYXRoLm1heCgwLCBNYXRoLnJvdW5kKGcpKSk7XG4gIGIgPSBNYXRoLm1pbigyNTUsIE1hdGgubWF4KDAsIE1hdGgucm91bmQoYikpKTtcblxuICBjb25zdCBoZXhSID0gci50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpO1xuICBjb25zdCBoZXhHID0gZy50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpO1xuICBjb25zdCBoZXhCID0gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpO1xuXG4gIHJldHVybiBgIyR7aGV4Un0ke2hleEd9JHtoZXhCfWAudG9VcHBlckNhc2UoKTtcbn1cblxuZXhwb3J0IGNvbnN0IHJnYlRvSGV4ID0gKHJnYmE6IHN0cmluZyk6IE1WYWx1ZTxzdHJpbmc+ID0+IHtcbiAgY29uc3QgcmdiVmFsdWVzID0gcmdiYVxuICAgIC5zbGljZSg0LCAtMSlcbiAgICAuc3BsaXQoXCIsXCIpXG4gICAgLm1hcCgodmFsdWUpID0+IHBhcnNlSW50KHZhbHVlLnRyaW0oKSkpO1xuXG4gIGlmIChyZ2JWYWx1ZXMubGVuZ3RoICE9PSAzKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBfcmdiVG9IZXgocmdiVmFsdWVzWzBdLCByZ2JWYWx1ZXNbMV0sIHJnYlZhbHVlc1syXSk7XG59O1xuIiwgImltcG9ydCB7IExpdGVyYWwgfSBmcm9tIFwiQC90eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgZ2V0Tm9kZVN0eWxlID0gKFxuICBub2RlOiBIVE1MRWxlbWVudCB8IEVsZW1lbnRcbik6IFJlY29yZDxzdHJpbmcsIExpdGVyYWw+ID0+IHtcbiAgY29uc3QgY29tcHV0ZWRTdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgY29uc3Qgc3R5bGVzOiBSZWNvcmQ8c3RyaW5nLCBMaXRlcmFsPiA9IHt9O1xuXG4gIE9iamVjdC52YWx1ZXMoY29tcHV0ZWRTdHlsZXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIHN0eWxlc1trZXldID0gY29tcHV0ZWRTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZShrZXkpO1xuICB9KTtcblxuICByZXR1cm4gc3R5bGVzO1xufTtcbiIsICJleHBvcnQgY29uc3QgY2FwaXRhbGl6ZSA9IChzdHI6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59O1xuIiwgImltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tIFwiLi9jYXBpdGFsaXplXCI7XG5cbmV4cG9ydCBjb25zdCB0b0NhbWVsQ2FzZSA9IChrZXk6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IHBhcnRzID0ga2V5LnNwbGl0KFwiLVwiKTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzW2ldID0gY2FwaXRhbGl6ZShwYXJ0c1tpXSk7XG4gIH1cbiAgcmV0dXJuIHBhcnRzLmpvaW4oXCJcIik7XG59O1xuIiwgImltcG9ydCB7IHJnYlRvSGV4IH0gZnJvbSBcInV0aWxzL3NyYy9jb2xvci9yZ2JhVG9IZXhcIjtcbmltcG9ydCB7IGdldE5vZGVTdHlsZSB9IGZyb20gXCJ1dGlscy9zcmMvZG9tL2dldE5vZGVTdHlsZVwiO1xuaW1wb3J0IHsgdG9DYW1lbENhc2UgfSBmcm9tIFwidXRpbHMvc3JjL3RleHQvdG9DYW1lbENhc2VcIjtcblxuaW50ZXJmYWNlIE1vZGVsIHtcbiAgbm9kZTogSFRNTEVsZW1lbnQ7XG4gIGZhbWlsaWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBkZWZhdWx0RmFtaWx5OiBzdHJpbmc7XG59XG5cbmNvbnN0IHYgPSB7XG4gIFwiZm9udC1mYW1pbHlcIjogdW5kZWZpbmVkLFxuICBcImZvbnQtZmFtaWx5LXR5cGVcIjogXCJ1cGxvYWRlZFwiLFxuICBcImZvbnQtd2VpZ2h0XCI6IHVuZGVmaW5lZCxcbiAgXCJmb250LXNpemVcIjogdW5kZWZpbmVkLFxuICBcImxpbmUtaGVpZ2h0XCI6IHVuZGVmaW5lZCxcbiAgXCJsZXR0ZXItc3BhY2luZ1wiOiB1bmRlZmluZWQsXG4gIGNvbG9ySGV4OiB1bmRlZmluZWQsXG4gIGNvbG9yT3BhY2l0eTogMSxcbiAgYWN0aXZlQ29sb3JIZXg6IHVuZGVmaW5lZCxcbiAgYWN0aXZlQ29sb3JPcGFjaXR5OiB1bmRlZmluZWRcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRNb2RlbCA9IChkYXRhOiBNb2RlbCkgPT4ge1xuICBjb25zdCB7IG5vZGUsIGZhbWlsaWVzLCBkZWZhdWx0RmFtaWx5IH0gPSBkYXRhO1xuICBjb25zdCBzdHlsZXMgPSBnZXROb2RlU3R5bGUobm9kZSk7XG4gIGNvbnN0IGRpYzogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyPiA9IHt9O1xuXG4gIE9iamVjdC5rZXlzKHYpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlIFwiZm9udC1mYW1pbHlcIjoge1xuICAgICAgICBjb25zdCB2YWx1ZTogc3RyaW5nID0gc3R5bGVzW2tleV07XG4gICAgICAgIGNvbnN0IGZvbnRGYW1pbHkgPSB2YWx1ZVxuICAgICAgICAgIC5yZXBsYWNlKC9bJ1wiXFwsXS9nLCBcIlwiKVxuICAgICAgICAgIC5yZXBsYWNlKC9cXHMvZywgXCJfXCIpXG4gICAgICAgICAgLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgaWYgKCFmYW1pbGllc1tmb250RmFtaWx5XSkge1xuICAgICAgICAgIGRpY1t0b0NhbWVsQ2FzZShrZXkpXSA9IGRlZmF1bHRGYW1pbHk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGljW3RvQ2FtZWxDYXNlKGtleSldID0gZmFtaWxpZXNbZm9udEZhbWlseV07XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiZm9udC1mYW1pbHktdHlwZVwiOiB7XG4gICAgICAgIGRpY1t0b0NhbWVsQ2FzZShrZXkpXSA9IFwidXBsb2FkXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcImxpbmUtaGVpZ2h0XCI6IHtcbiAgICAgICAgZGljW3RvQ2FtZWxDYXNlKGtleSldID0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiZm9udC1zaXplXCI6IHtcbiAgICAgICAgZGljW3RvQ2FtZWxDYXNlKGtleSldID0gcGFyc2VJbnQoc3R5bGVzW2tleV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJsZXR0ZXItc3BhY2luZ1wiOiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIGRpY1t0b0NhbWVsQ2FzZShrZXkpXSA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUmVtb3ZlICdweCcgYW5kIGFueSBleHRyYSB3aGl0ZXNwYWNlXG4gICAgICAgICAgY29uc3QgbGV0dGVyU3BhY2luZ1ZhbHVlID0gdmFsdWUucmVwbGFjZSgvcHgvZywgXCJcIikudHJpbSgpO1xuICAgICAgICAgIGRpY1t0b0NhbWVsQ2FzZShrZXkpXSA9ICtsZXR0ZXJTcGFjaW5nVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiY29sb3JIZXhcIjoge1xuICAgICAgICBjb25zdCB0b0hleCA9IHJnYlRvSGV4KHN0eWxlc1tcImNvbG9yXCJdKTtcbiAgICAgICAgZGljW3RvQ2FtZWxDYXNlKGtleSldID0gdG9IZXggPz8gXCIjMDAwMDAwXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcImNvbG9yT3BhY2l0eVwiOiB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBkaWNbdG9DYW1lbENhc2Uoa2V5KV0gPSBzdHlsZXNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkaWM7XG59O1xuIiwgImltcG9ydCB7IEVudHJ5LCBPdXRwdXQsIE91dHB1dERhdGEgfSBmcm9tIFwiQC90eXBlcy90eXBlXCI7XG5cbmV4cG9ydCBjb25zdCBnZXREYXRhID0gKCk6IEVudHJ5ID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0b3I6IFwie3tzZWxlY3Rvcn19XCIsXG4gICAgICBmYW1pbGllczogSlNPTi5wYXJzZShcInt7ZmFtaWxpZXN9fVwiKSxcbiAgICAgIGRlZmF1bHRGYW1pbHk6IFwie3tkZWZhdWx0RmFtaWx5fX1cIlxuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zdCBmYW1pbHlNb2NrID0ge1xuICAgICAgbGF0bzogXCJ1aWRfZm9yX2xhdG9cIixcbiAgICAgIHJvYm90bzogXCJ1aWRfZm9yX3JvYm90b1wiXG4gICAgfTtcbiAgICBjb25zdCBtb2NrOiBFbnRyeSA9IHtcbiAgICAgIHNlbGVjdG9yOiBcIi5teS1kaXZcIixcbiAgICAgIGZhbWlsaWVzOiBmYW1pbHlNb2NrLFxuICAgICAgZGVmYXVsdEZhbWlseTogXCJsYXRvXCJcbiAgICB9O1xuXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBlcnJvcjogYEludmFsaWQgSlNPTiAke2V9YCxcbiAgICAgICAgZGV0YWlsczogYE11c3QgYmU6ICR7SlNPTi5zdHJpbmdpZnkobW9jayl9YFxuICAgICAgfSlcbiAgICApO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlRGF0YSA9IChvdXRwdXQ6IE91dHB1dERhdGEpOiBPdXRwdXQgPT4ge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob3V0cHV0KTtcbn07XG4iLCAiaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gXCJAL3RleHQvY2FwaXRhbGl6ZVwiO1xuXG5leHBvcnQgY29uc3QgcHJlZml4ZWQgPSA8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+PihcbiAgdjogVCxcbiAgcHJlZml4OiBzdHJpbmdcbik6IFQgPT4ge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXModikucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIGxldCBfa2V5ID0gcHJlZml4ICsgY2FwaXRhbGl6ZShrZXkpO1xuXG4gICAgaWYgKGtleS5zdGFydHNXaXRoKFwiYWN0aXZlXCIpKSB7XG4gICAgICBfa2V5ID0gYGFjdGl2ZSR7Y2FwaXRhbGl6ZShwcmVmaXgpfSR7a2V5LnJlcGxhY2UoXCJhY3RpdmVcIiwgXCJcIil9YDtcbiAgICB9XG5cbiAgICByZXR1cm4geyAuLi5hY2MsIFtfa2V5XTogdmFsdWUgfTtcbiAgfSwge30gYXMgVCk7XG59O1xuIiwgImltcG9ydCB7IEVudHJ5LCBPdXRwdXQgfSBmcm9tIFwiLi4vdHlwZXMvdHlwZVwiO1xuaW1wb3J0IHsgZ2V0TW9kZWwgfSBmcm9tIFwiLi9tb2RlbC9nZXRNb2RlbFwiO1xuaW1wb3J0IHsgY3JlYXRlRGF0YSwgZ2V0RGF0YSB9IGZyb20gXCJlbGVtZW50cy9zcmMvdXRpbHMvZ2V0RGF0YVwiO1xuaW1wb3J0IHsgcmdiVG9IZXggfSBmcm9tIFwidXRpbHMvc3JjL2NvbG9yL3JnYmFUb0hleFwiO1xuaW1wb3J0IHsgcHJlZml4ZWQgfSBmcm9tIFwidXRpbHMvc3JjL21vZGVscy9wcmVmaXhlZFwiO1xuXG5pbnRlcmZhY2UgTmF2RGF0YSB7XG4gIG5hdjogRWxlbWVudDtcbiAgc3ViTmF2PzogRWxlbWVudDtcbiAgc2VsZWN0b3I6IHN0cmluZztcbiAgZmFtaWxpZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gIGRlZmF1bHRGYW1pbHk6IHN0cmluZztcbn1cblxubGV0IHdhcm5zOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiA9IHt9O1xuXG5jb25zdCBnZXRNZW51ViA9IChkYXRhOiBOYXZEYXRhKSA9PiB7XG4gIGNvbnN0IHsgbmF2LCBzZWxlY3RvciB9ID0gZGF0YTtcbiAgY29uc3QgdWwgPSBuYXYuY2hpbGRyZW5bMF07XG4gIGxldCB2ID0ge307XG5cbiAgaWYgKCF1bCkge1xuICAgIHdhcm5zW1wibWVudVwiXSA9IHtcbiAgICAgIG1lc3NhZ2U6IGBOYXZpZ2F0aW9uIGRvbid0IGhhdmUgdWwgaW4gJHtzZWxlY3Rvcn1gXG4gICAgfTtcbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIGNvbnN0IGxpID0gdWwucXVlcnlTZWxlY3RvcihcImxpXCIpO1xuICBpZiAoIWxpKSB7XG4gICAgd2FybnNbXCJtZW51IGxpXCJdID0ge1xuICAgICAgbWVzc2FnZTogYE5hdmlnYXRpb24gZG9uJ3QgaGF2ZSB1bCA+IGxpIGluICR7c2VsZWN0b3J9YFxuICAgIH07XG4gICAgcmV0dXJuIHY7XG4gIH1cblxuICBjb25zdCBsaW5rID0gdWwucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oXCJsaSA+IGFcIik7XG4gIGlmICghbGluaykge1xuICAgIHdhcm5zW1wibWVudSBsaSBhXCJdID0ge1xuICAgICAgbWVzc2FnZTogYE5hdmlnYXRpb24gZG9uJ3QgaGF2ZSB1bCA+IGxpID4gYSBpbiAke3NlbGVjdG9yfWBcbiAgICB9O1xuICAgIHJldHVybiB2O1xuICB9XG5cbiAgdiA9IGdldE1vZGVsKHtcbiAgICBub2RlOiBsaW5rLFxuICAgIGZhbWlsaWVzOiBkYXRhLmZhbWlsaWVzLFxuICAgIGRlZmF1bHRGYW1pbHk6IGRhdGEuZGVmYXVsdEZhbWlseVxuICB9KTtcblxuICByZXR1cm4geyAuLi52LCBpdGVtUGFkZGluZzogMjAgfTtcbn07XG5cbmNvbnN0IGdldFN1Yk1lbnVWID0gKGRhdGE6IFJlcXVpcmVkPE5hdkRhdGE+KSA9PiB7XG4gIGNvbnN0IHsgc3ViTmF2OiB1bCwgc2VsZWN0b3IgfSA9IGRhdGE7XG5cbiAgbGV0IHYgPSB7fTtcblxuICBjb25zdCBsaSA9IHVsLnF1ZXJ5U2VsZWN0b3IoXCJsaVwiKTtcbiAgaWYgKCFsaSkge1xuICAgIHdhcm5zW1wic3VibWVudSBsaVwiXSA9IHtcbiAgICAgIG1lc3NhZ2U6IGBOYXZpZ2F0aW9uIGRvbid0IGhhdmUgdWwgPiBsaSBpbiAke3NlbGVjdG9yfWBcbiAgICB9O1xuICAgIHJldHVybiB2O1xuICB9XG5cbiAgY29uc3QgbGluayA9IHVsLnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KFwibGkgPiBhXCIpO1xuICBpZiAoIWxpbmspIHtcbiAgICB3YXJuc1tcInN1Ym1lbnUgbGkgYVwiXSA9IHtcbiAgICAgIG1lc3NhZ2U6IGBOYXZpZ2F0aW9uIGRvbid0IGhhdmUgdWwgPiBsaSA+IGEgaW4gJHtzZWxlY3Rvcn1gXG4gICAgfTtcbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIGNvbnN0IHR5cG9ncmFwaHkgPSBnZXRNb2RlbCh7XG4gICAgbm9kZTogbGluayxcbiAgICBmYW1pbGllczogZGF0YS5mYW1pbGllcyxcbiAgICBkZWZhdWx0RmFtaWx5OiBkYXRhLmRlZmF1bHRGYW1pbHlcbiAgfSk7XG4gIGNvbnN0IHN1Ym1lbnVUeXBvZ3JhcGh5ID0gcHJlZml4ZWQodHlwb2dyYXBoeSwgXCJzdWJNZW51XCIpO1xuICBjb25zdCBiYXNlU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh1bCk7XG4gIGNvbnN0IGJnQ29sb3IgPSByZ2JUb0hleChiYXNlU3R5bGUuYmFja2dyb3VuZENvbG9yKSA/PyBcIiNmZmZmZmZcIjtcblxuICByZXR1cm4ge1xuICAgIC4uLnN1Ym1lbnVUeXBvZ3JhcGh5LFxuICAgIHN1Yk1lbnVCZ0NvbG9yT3BhY2l0eTogMSxcbiAgICBzdWJNZW51QmdDb2xvckhleDogYmdDb2xvclxuICB9O1xufTtcblxuY29uc3QgZ2V0TmF2U3R5bGVzID0gKGRhdGE6IE5hdkRhdGEpID0+IHtcbiAgY29uc3QgeyBzdWJOYXYgfSA9IGRhdGE7XG4gIGxldCBtZW51ViA9IGdldE1lbnVWKGRhdGEpO1xuXG4gIGlmIChzdWJOYXYpIHtcbiAgICBjb25zdCBfdiA9IGdldFN1Yk1lbnVWKHsgLi4uZGF0YSwgc3ViTmF2IH0pO1xuICAgIG1lbnVWID0geyAuLi5tZW51ViwgLi4uX3YgfTtcbiAgfVxuXG4gIHJldHVybiBtZW51Vjtcbn07XG5cbmNvbnN0IHJ1biA9IChkYXRhOiBFbnRyeSk6IE91dHB1dCA9PiB7XG4gIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRhdGEuc2VsZWN0b3IpO1xuXG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBlcnJvcjogYEVsZW1lbnQgd2l0aCBzZWxlY3RvciAke2RhdGEuc2VsZWN0b3J9IG5vdCBmb3VuZGAsXG4gICAgICB3YXJuczogd2FybnNcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGhlYWRlciA9IG5vZGU7XG5cbiAgaWYgKCFoZWFkZXIpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgZXJyb3I6IGBFbGVtZW50IHdpdGggc2VsZWN0b3IgJHtkYXRhLnNlbGVjdG9yfSBoYXMgbm8gaGVhZGVyYCxcbiAgICAgIHdhcm5zXG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBuYXYgPSBoZWFkZXIucXVlcnlTZWxlY3RvcihcIiNtYWluLW5hdmlnYXRpb25cIik7XG5cbiAgaWYgKCFuYXYpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgZXJyb3I6IGBFbGVtZW50IHdpdGggc2VsZWN0b3IgJHtkYXRhLnNlbGVjdG9yfSBoYXMgbm8gbmF2YCxcbiAgICAgIHdhcm5zXG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBzdWJOYXYgPVxuICAgIGhlYWRlci5xdWVyeVNlbGVjdG9yKFwiLnN1Yi1uYXZpZ2F0aW9uXCIpID8/IHVuZGVmaW5lZDtcblxuICBjb25zdCBuYXZEYXRhID0ge1xuICAgIG5hdjogbmF2LFxuICAgIHN1Yk5hdjogc3ViTmF2LFxuICAgIHNlbGVjdG9yOiBkYXRhLnNlbGVjdG9yLFxuICAgIGZhbWlsaWVzOiBkYXRhLmZhbWlsaWVzLFxuICAgIGRlZmF1bHRGYW1pbHk6IGRhdGEuZGVmYXVsdEZhbWlseVxuICB9O1xuXG4gIHJldHVybiBjcmVhdGVEYXRhKHsgZGF0YTogZ2V0TmF2U3R5bGVzKG5hdkRhdGEpLCB3YXJucyB9KTtcbn07XG5cbmNvbnN0IGRhdGEgPSBnZXREYXRhKCk7XG5cbnJ1bihkYXRhKTtcbiJdLAogICJtYXBwaW5ncyI6ICI7OztBQUVBLFdBQVMsVUFBVSxHQUFXLEdBQVcsR0FBbUI7QUFDMUQs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
