"use strict";
(() => {
  // ../../../../../../../packages/elements/src/utils/getData.ts
  var createData = (output) => {
    return JSON.stringify(output);
  };

  // ../../../../../../../packages/utils/src/dom/getNodeStyle.ts
  var getNodeStyle = (node) => {
    const computedStyles = window.getComputedStyle(node);
    const styles = {};
    Object.values(computedStyles).forEach((key) => {
      styles[key] = computedStyles.getPropertyValue(key);
    });
    return styles;
  };

  // ../../../../../../../packages/elements/src/StyleExtractor/index.ts
  var styleExtractor = (data2) => {
    const { selector, styleProperties } = data2;
    const styles = {};
    const element = document.querySelector(selector);
    if (!element) {
      return JSON.stringify({
        error: `Element with selector ${selector} not found`
      });
    }
    const computedStyles = getNodeStyle(element);
    styleProperties.forEach((styleName) => {
      styles[styleName] = computedStyles[styleName];
    });
    return createData({ data: styles });
  };

  // src/StyleExtractor/index.ts
  var getData = () => {
    try {
      return {
        selector: "{{selector}}",
        families: JSON.parse("{{families}}"),
        styleProperties: JSON.parse("{{styleProperties}}"),
        defaultFamily: "{{defaultFamily}}"
      };
    } catch (e) {
      const familyMock = {
        lato: "uid_for_lato",
        roboto: "uid_for_roboto"
      };
      const mock = {
        selector: ".my-div",
        families: familyMock,
        defaultFamily: "lato"
      };
      throw new Error(
        JSON.stringify({
          error: `Invalid JSON ${e}`,
          details: `Must be: ${JSON.stringify(mock)}`
        })
      );
    }
  };
  var data = getData();
  styleExtractor(data);
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvZWxlbWVudHMvc3JjL3V0aWxzL2dldERhdGEudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvdXRpbHMvc3JjL2RvbS9nZXROb2RlU3R5bGUudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvZWxlbWVudHMvc3JjL1N0eWxlRXh0cmFjdG9yL2luZGV4LnRzIiwgIi4uL3NyYy9TdHlsZUV4dHJhY3Rvci9pbmRleC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgRW50cnksIE91dHB1dCwgT3V0cHV0RGF0YSB9IGZyb20gXCJAL3R5cGVzL3R5cGVcIjtcblxuZXhwb3J0IGNvbnN0IGdldERhdGEgPSAoKTogRW50cnkgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RvcjogXCJ7e3NlbGVjdG9yfX1cIixcbiAgICAgIGZhbWlsaWVzOiBKU09OLnBhcnNlKFwie3tmYW1pbGllc319XCIpLFxuICAgICAgZGVmYXVsdEZhbWlseTogXCJ7e2RlZmF1bHRGYW1pbHl9fVwiXG4gICAgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnN0IGZhbWlseU1vY2sgPSB7XG4gICAgICBsYXRvOiBcInVpZF9mb3JfbGF0b1wiLFxuICAgICAgcm9ib3RvOiBcInVpZF9mb3Jfcm9ib3RvXCJcbiAgICB9O1xuICAgIGNvbnN0IG1vY2s6IEVudHJ5ID0ge1xuICAgICAgc2VsZWN0b3I6IFwiLm15LWRpdlwiLFxuICAgICAgZmFtaWxpZXM6IGZhbWlseU1vY2ssXG4gICAgICBkZWZhdWx0RmFtaWx5OiBcImxhdG9cIlxuICAgIH07XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGVycm9yOiBgSW52YWxpZCBKU09OICR7ZX1gLFxuICAgICAgICBkZXRhaWxzOiBgTXVzdCBiZTogJHtKU09OLnN0cmluZ2lmeShtb2NrKX1gXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVEYXRhID0gKG91dHB1dDogT3V0cHV0RGF0YSk6IE91dHB1dCA9PiB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvdXRwdXQpO1xufTtcbiIsICJpbXBvcnQgeyBMaXRlcmFsIH0gZnJvbSBcIkAvdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IGdldE5vZGVTdHlsZSA9IChcbiAgbm9kZTogSFRNTEVsZW1lbnQgfCBFbGVtZW50XG4pOiBSZWNvcmQ8c3RyaW5nLCBMaXRlcmFsPiA9PiB7XG4gIGNvbnN0IGNvbXB1dGVkU3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gIGNvbnN0IHN0eWxlczogUmVjb3JkPHN0cmluZywgTGl0ZXJhbD4gPSB7fTtcblxuICBPYmplY3QudmFsdWVzKGNvbXB1dGVkU3R5bGVzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBzdHlsZXNba2V5XSA9IGNvbXB1dGVkU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoa2V5KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHN0eWxlcztcbn07XG4iLCAiaW1wb3J0IHsgRW50cnksIE91dHB1dCB9IGZyb20gXCJAL3R5cGVzL3R5cGVcIjtcbmltcG9ydCB7IGNyZWF0ZURhdGEgfSBmcm9tIFwiQC91dGlscy9nZXREYXRhXCI7XG5pbXBvcnQgeyBMaXRlcmFsIH0gZnJvbSBcInV0aWxzXCI7XG5pbXBvcnQgeyBnZXROb2RlU3R5bGUgfSBmcm9tIFwidXRpbHMvc3JjL2RvbS9nZXROb2RlU3R5bGVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBEYXRhIGV4dGVuZHMgRW50cnkge1xuICBzdHlsZVByb3BlcnRpZXM6IEFycmF5PHN0cmluZz47XG59XG5cbmV4cG9ydCBjb25zdCBzdHlsZUV4dHJhY3RvciA9IChkYXRhOiBEYXRhKTogT3V0cHV0ID0+IHtcbiAgY29uc3QgeyBzZWxlY3Rvciwgc3R5bGVQcm9wZXJ0aWVzIH0gPSBkYXRhO1xuICBjb25zdCBzdHlsZXM6IFJlY29yZDxzdHJpbmcsIExpdGVyYWw+ID0ge307XG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcblxuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgZXJyb3I6IGBFbGVtZW50IHdpdGggc2VsZWN0b3IgJHtzZWxlY3Rvcn0gbm90IGZvdW5kYFxuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgY29tcHV0ZWRTdHlsZXMgPSBnZXROb2RlU3R5bGUoZWxlbWVudCk7XG5cbiAgc3R5bGVQcm9wZXJ0aWVzLmZvckVhY2goKHN0eWxlTmFtZSkgPT4ge1xuICAgIHN0eWxlc1tzdHlsZU5hbWVdID0gY29tcHV0ZWRTdHlsZXNbc3R5bGVOYW1lXTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNyZWF0ZURhdGEoeyBkYXRhOiBzdHlsZXMgfSk7XG59O1xuIiwgImltcG9ydCB7IHN0eWxlRXh0cmFjdG9yLCBEYXRhIH0gZnJvbSBcImVsZW1lbnRzL3NyYy9TdHlsZUV4dHJhY3RvclwiO1xuaW1wb3J0IHsgRW50cnkgfSBmcm9tIFwiZWxlbWVudHMvc3JjL3R5cGVzL3R5cGVcIjtcblxuZXhwb3J0IGNvbnN0IGdldERhdGEgPSAoKTogRGF0YSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbGVjdG9yOiBcInt7c2VsZWN0b3J9fVwiLFxuICAgICAgZmFtaWxpZXM6IEpTT04ucGFyc2UoXCJ7e2ZhbWlsaWVzfX1cIiksXG4gICAgICBzdHlsZVByb3BlcnRpZXM6IEpTT04ucGFyc2UoXCJ7e3N0eWxlUHJvcGVydGllc319XCIpLFxuICAgICAgZGVmYXVsdEZhbWlseTogXCJ7e2RlZmF1bHRGYW1pbHl9fVwiXG4gICAgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnN0IGZhbWlseU1vY2sgPSB7XG4gICAgICBsYXRvOiBcInVpZF9mb3JfbGF0b1wiLFxuICAgICAgcm9ib3RvOiBcInVpZF9mb3Jfcm9ib3RvXCJcbiAgICB9O1xuICAgIGNvbnN0IG1vY2s6IEVudHJ5ID0ge1xuICAgICAgc2VsZWN0b3I6IFwiLm15LWRpdlwiLFxuICAgICAgZmFtaWxpZXM6IGZhbWlseU1vY2ssXG4gICAgICBkZWZhdWx0RmFtaWx5OiBcImxhdG9cIlxuICAgIH07XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGVycm9yOiBgSW52YWxpZCBKU09OICR7ZX1gLFxuICAgICAgICBkZXRhaWxzOiBgTXVzdCBiZTogJHtKU09OLnN0cmluZ2lmeShtb2NrKX1gXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn07XG5cbmNvbnN0IGRhdGEgPSBnZXREYXRhKCk7XG5cbnN0eWxlRXh0cmFjdG9yKGRhdGEpO1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7O0FBNkJPLE1BQU0sYUFBYSxDQUFDLFdBQStCO0FBQ3hELFdBQU8sS0FBSyxVQUFVLE1BQU07QUFBQSxFQUM5Qjs7O0FDN0JPLE1BQU0sZUFBZSxDQUMxQixTQUM0QjtBQUM1QixVQUFNLGlCQUFpQixPQUFPLGlCQUFpQixJQUFJO0FBQ25ELFVBQU0sU0FBa0MsQ0FBQztBQUV6QyxXQUFPLE9BQU8sY0FBYyxFQUFFLFFBQVEsQ0FBQyxRQUFRO0FBQzdDLGFBQU8sR0FBRyxJQUFJLGVBQWUsaUJBQWlCLEdBQUc7QUFBQSxJQUNuRCxDQUFDO0FBRUQsV0FBTztBQUFBLEVBQ1Q7OztBQ0pPLE1BQU0saUJBQWlCLENBQUNBLFVBQXVCO0FBQ3BELFVBQU0sRUFBRSxVQUFVLGdCQUFnQixJQUFJQTtBQUN0QyxVQUFNLFNBQWtDLENBQUM7QUFDekMsVUFBTSxVQUFVLFNBQVMsY0FBYyxRQUFRO0FBRS9DLFFBQUksQ0FBQyxTQUFTO0FBQ1osYUFBTyxLQUFLLFVBQVU7QUFBQSxRQUNwQixPQUFPLHlCQUF5QixRQUFRO0FBQUEsTUFDMUMsQ0FBQztBQUFBLElBQ0g7QUFFQSxVQUFNLGlCQUFpQixhQUFhLE9BQU87QUFFM0Msb0JBQWdCLFFBQVEsQ0FBQyxjQUFjO0FBQ3JDLGFBQU8sU0FBUyxJQUFJLGVBQWUsU0FBUztBQUFBLElBQzlDLENBQUM7QUFFRCxXQUFPLFdBQVcsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUFBLEVBQ3BDOzs7QUN4Qk8sTUFBTSxVQUFVLE1BQVk7QUFDakMsUUFBSTtBQUNGLGFBQU87QUFBQSxRQUNMLFVBQVU7QUFBQSxRQUNWLFVBQVUsS0FBSyxNQUFNLGNBQWM7QUFBQSxRQUNuQyxpQkFBaUIsS0FBSyxNQUFNLHFCQUFxQjtBQUFBLFFBQ2pELGVBQWU7QUFBQSxNQUNqQjtBQUFBLElBQ0YsU0FBUyxHQUFHO0FBQ1YsWUFBTSxhQUFhO0FBQUEsUUFDakIsTUFBTTtBQUFBLFFBQ04sUUFBUTtBQUFBLE1BQ1Y7QUFDQSxZQUFNLE9BQWM7QUFBQSxRQUNsQixVQUFVO0FBQUEsUUFDVixVQUFVO0FBQUEsUUFDVixlQUFlO0FBQUEsTUFDakI7QUFFQSxZQUFNLElBQUk7QUFBQSxRQUNSLEtBQUssVUFBVTtBQUFBLFVBQ2IsT0FBTyxnQkFBZ0IsQ0FBQztBQUFBLFVBQ3hCLFNBQVMsWUFBWSxLQUFLLFVBQVUsSUFBSSxDQUFDO0FBQUEsUUFDM0MsQ0FBQztBQUFBLE1BQ0g7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUVBLE1BQU0sT0FBTyxRQUFRO0FBRXJCLGlCQUFlLElBQUk7IiwKICAibmFtZXMiOiBbImRhdGEiXQp9Cg==
